{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityLitemItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MyTextInput.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropZone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activities","list","params","details","create","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profile","userName","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParms","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","state","createActivity","userStore","attendee","newActivity","hostUserName","attendees","updateActivity","updatedActivity","deleteActivity","updateAttendence","isGoing","filter","cancelAticityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","some","isHost","host","find","x","Date","ProfileStore","loadingProfile","uploading","loadingFollowings","followings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","setDisplayName","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","getFacebookLoginStatus","window","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","logout","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityid","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","activityId","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextArea","props","useField","field","meta","Form","Field","touched","label","MyTextInput","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","placeholder","categoryOptions","MyDateInput","selected","useHistory","useParams","validationSchema","Yup","required","nullable","enableReinitialize","initialValues","onSubmit","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","autoComplete","className","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","type","email","password","setErrors","render","ValidationErrors","Message","err","i","isLoggedIn","Divider","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","verticalAlign","relaxed","divided","ribbon","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","ProfileEditForm","setEditMode","ProfileAbout","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","catergory","objectFit","Meta","PhotoWidgetDropZone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","boderColor","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileFollowings","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e8109b37.chunk.js","sourcesContent":["import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUserName: string;\r\n    isCancelled: boolean;\r\n    isGoing:boolean;\r\n    isHost :boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]    \r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?:ActivityFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string= '';\r\n    date : Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?:ActivityFormValues){\r\n        if(activity){\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }        \r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor( data: T, pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber\r\n    pageSize;\r\n\r\n    constructor( pageNumber = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;    \r\n    }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { reaction } from \"mobx\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = ( delay: number)=>{\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)            \r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use( config =>{\r\n\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n\r\n} )\r\n\r\naxios.interceptors.response.use( async response => {\r\n\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    const pagination = response.headers['pagination'];\r\n    if( pagination){\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n\r\n    switch( status ){\r\n        case 400:\r\n            if( typeof data==='string') {\r\n                toast.error(data);\r\n            }\r\n            if( config.method === 'get' && data.errors.hasOwnProperty('id')){\r\n                history.push('/not-found');\r\n            }\r\n            if(data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if( data.errors[key]){\r\n                        modalStateErrors.push(data.errors[key]);                        \r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }            \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised')\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n} );\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url:string)=>axios.get<T>(url).then(responseBody),\r\n    post: <T> (url:string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n    put: <T> (url:string, body: {}) => axios.put<T>(url,body).then(responseBody),\r\n    del: <T> (url:string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>(  '/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(        `/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => \r\n                        requests.post<void>(                '/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put( `/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(             `/activities/${id}`),\r\n    attend: (id:string)=> requests.post<void>(              `/activities/${id}/attend`,{})\r\n}\r\n\r\nconst Account = {\r\n    current:() => requests.get<User>('/account'),\r\n    login:(user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>( '/account/register', user),\r\n    fbLogin: (accessToken:string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file:Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos',formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`,{}),\r\n    deletePhoto:  (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile> ) => requests.put('/profiles',profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate:string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username:string, predicate: string)=>\r\n        requests.get<UserActivity[]> (`/profiles/${username}/activities?predicate=${predicate}`),\r\n}\r\n\r\nconst agent = {\r\n    Profiles,\r\n    Activities,\r\n    Account\r\n}\r\n\r\nexport default agent;","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User){\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title:string;\r\n    catergory:string;\r\n    date: Date;\r\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\n\r\nimport agent from '../api/agent';\r\nimport { format } from \"date-fns\";\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n\r\n    activityRegistry = new Map<string, Activity>();\r\n\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParms = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction( \r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParms = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParms:PagingParams) =>{\r\n        this.pagingParms = pagingParms;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate =() => {\r\n            this.predicate.forEach((value, key) => {\r\n                if(key !== 'startFate')  this.predicate.delete(key) ;\r\n            })\r\n        }\r\n\r\n        switch(predicate)            {\r\n            case 'all' :\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;    \r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n\r\n        params.append( 'pageNumber', this.pagingParms.pageNumber.toString())\r\n        params.append( 'pageSize', this.pagingParms.pageSize.toString())\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if(key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key,value)                    \r\n            }\r\n        });\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate () {\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a,b)=> a.date!.getTime() - b.date!.getTime());        \r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity)=>{\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        ) \r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        this.setLoadingInitial(true);\r\n        try{\r\n            const result = await agent.Activities.list(this.axiosParams)\r\n            result.data.forEach( activity => {\r\n                this.setActivity(activity);\r\n            })            \r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        }catch(error){\r\n            console.log(error);            \r\n            this.setLoadingInitial(false);            \r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id:string) => {\r\n        let activity = this.getActivity(id);\r\n        if(activity){            \r\n            this.selectedActivity = activity;            \r\n            return activity;\r\n        } else{ \r\n            this.loadingInitial = true;\r\n            try{\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(()=>{     \r\n                    this.selectedActivity = activity;\r\n                })                \r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);               \r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity( activity : Activity){\r\n        const user = store.userStore.user;\r\n        if(user){\r\n            activity.isGoing = activity.attendees?.some(\r\n                a => a.userName === user.userName\r\n                )\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees?.find( x=> x.userName===activity.hostUserName)\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set( activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id:string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }    \r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try{ \r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(()=>{                            \r\n                this.selectedActivity = newActivity;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try{ \r\n            await agent.Activities.update(activity);\r\n            runInAction(()=>{\r\n                if(activity.id){\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\r\n                    this.activityRegistry.set( activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;            \r\n                }\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }    \r\n\r\n    deleteActivity = async ( id: string)=>{\r\n        this.loading = true;\r\n        try{ \r\n            await agent.Activities.delete(id);\r\n            runInAction(()=>{\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=>{\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendence = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction( ()=>{\r\n                if(this.selectedActivity?.isGoing){\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\r\n                this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set( this.selectedActivity!.id, this.selectedActivity!)\r\n            })               \r\n        }catch(error){\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(()=>this.loading=false);\r\n        }\r\n    }\r\n\r\n    cancelAticityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend( this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\r\n                this.activityRegistry.set( this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n            \r\n        } catch(error){\r\n            console.log(error);\r\n        } finally{\r\n            runInAction(()=>this.loading=false);\r\n        }\r\n       \r\n    }\r\n\r\n    clearSelectedActivity = () =>{\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach ( activity => {\r\n            activity.attendees.forEach( attendee => {\r\n                if( attendee.userName === username){\r\n                    attendee.following ? attendee.followersCount--:attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            });                \r\n        });      \r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ProfileStore {\r\n    profile : Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    loadingFollowings = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction (\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if( activeTab === 3 || this.activeTab === 4){\r\n                    const predicate =  activeTab === 3 ? \"followers\" : \"following\";\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if(store.userStore.user && this.profile){\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username : string ) =>{\r\n        this.loadingProfile = true;\r\n        try{ \r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction( ()=> {\r\n                this.profile = profile;\r\n                this.loadingProfile= false;                    \r\n            })\r\n            \r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async(profile:Partial<Profile>) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);           \r\n            runInAction(()=> {\r\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName)                {\r\n                    store.userStore.setDisplayName(profile.displayName)            \r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile }\r\n                this.loadingProfile = false;                \r\n            })        \r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }        \r\n    }\r\n\r\n    uploadPhoto = async (file:Blob) => {\r\n        this.uploading = true;\r\n        try{\r\n            if(file){\r\n                const response = await agent.Profiles.uploadPhoto(file);\r\n                const photo = response.data;\r\n                runInAction(()=>{\r\n                    if(this.profile){\r\n                        this.profile.photos?.push(photo);\r\n\r\n                        if(photo.isMain && store.userStore.user){\r\n                            store.userStore.setImage(photo.url);\r\n                            this.profile.image = photo.url;\r\n                        }\r\n                    }\r\n                    this.uploading = false;\r\n                })\r\n            }\r\n        }catch(error){\r\n            console.log(error)\r\n            runInAction(()=>this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try{            \r\n            await agent.Profiles.setMainPhoto(photo.id);            \r\n            store.userStore.setImage(photo.url);\r\n            runInAction(()=>{\r\n                if(this.profile && this.profile.photos){\r\n                    this.profile.photos.find( p =>p.isMain)!.isMain = false;\r\n                    this.profile.photos.find( p =>p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);            \r\n            runInAction(()=>this.loading = false);\r\n        }        \r\n    }\r\n\r\n    deletePhoto = async (photo:Photo)=>{\r\n            this.loading = true;\r\n            try{\r\n                await agent.Profiles.deletePhoto(photo.id)\r\n                runInAction(()=>{\r\n                    if( this.profile) {\r\n                        this.profile.photos = this.profile?.photos?.filter(p=> p.id !== photo.id)\r\n                    }\r\n                    this.loading = false;\r\n                })\r\n            }catch(error) {\r\n                console.log(error);\r\n                runInAction(()=> this.loading=false);\r\n            }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try{ \r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(()=>{\r\n                if( this.profile && \r\n                        this.profile.userName !== store.userStore.user?.userName && \r\n                        this.profile.userName === username) {\r\n\r\n                    following ? this.profile.followingCount++ :  this.profile.followingCount--;\r\n                    this.profile.following = !this.profile.following;                    \r\n                }\r\n\r\n                if( this.profile && this.profile.userName === store.userStore.user?.userName ){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                }\r\n                 \r\n                this.followings.forEach( profile => {\r\n                    if( profile.userName === username){\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n\r\n                this.loading=false\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loading=false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate:string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try{            \r\n            const followings = await agent.Profiles.listFollowings( this.profile!.userName, predicate)\r\n            runInAction( () => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(()=> this.loadingFollowings=false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) =>{\r\n        this.loadingActivities = true;\r\n        try{\r\n            const activities = await agent.Profiles.listActivities( username, predicate!);\r\n            runInAction(()=>{\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        } catch(error){\r\n            console.log(error);\r\n            runInAction(()=>this.loadingActivities = false);\r\n        }\r\n    }\r\n\r\n}","import { access } from \"fs\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore{\r\n    user: User | null = null;\r\n    fbAccessToken : string | null = null;\r\n    fbLoading : boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !! this.user;\r\n    }\r\n\r\n    login = async ( creds: UserFormValues) => {\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=> this.user = user);\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal()\r\n        } catch(error) {\r\n            throw error;\r\n        }   \r\n    }\r\n\r\n    getFacebookLoginStatus = async () =>{\r\n        window.FB.getLoginStatus(response => {\r\n            if(response.status === 'connected'){\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = async () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken:string) => {\r\n            agent.Account.fbLogin(accessToken).then( user=> {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(()=>{\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch( error => {\r\n                console.log(error);\r\n                runInAction(()=>this.fbLoading = false);\r\n            })\r\n        }\r\n        if(this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login( response =>{\r\n                apiLogin(response.authResponse.accessToken)\r\n            }, {scope:'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction( ()=> this.user = user );\r\n        } catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n\r\n        try{\r\n            const user = await agent.Account.register(creds);\r\n\r\n            store.commonStore.setToken(user.token);\r\n\r\n            runInAction(()=> this.user = user);\r\n\r\n            history.push('/activities');\r\n            store.modalStore.closeModal()        \r\n        } catch(error) {\r\n            throw error;\r\n        }   \r\n    }\r\n\r\n    setImage = (image: string)=>{\r\n        if( this.user){\r\n            this.user.image = image\r\n        }    \r\n    }\r\n\r\n    setDisplayName = async (displayName: string) => {\r\n        if(this.user)        {\r\n            this.user.displayName = displayName\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore : ActivityStore;\r\n    commonStore : CommonStore;\r\n    userStore : UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt',token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;        \r\n    }\r\n\r\n    setToken = (token: string | null) => {        \r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore{ \r\n    comments : ChatComment[] = [];\r\n    hubConnection : HubConnection | null = null;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityid: string) => {\r\n        if(store.activityStore.selectedActivity){\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL + '?activityId='+ activityid, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error=>console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments : ChatComment[]) => {\r\n                runInAction(()=> {\r\n                    comments.forEach( comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z')\r\n                    });                      \r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(()=> {\r\n                    comment.createdAt = new Date(comment.createdAt)\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch( error => console.log('Error Stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) =>{\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer( function NavBar(){\r\n    const {userStore: {user, logout}}  = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>                        \r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image  src={user?.image || '/assets/user.png'} avatar spaced='right'/>\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n\r\n            </Container>                \r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nexport default observer(  function FollowButton({profile}: Props) {\r\n    const {userStore, profileStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if( userStore.user?.userName === profile.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username : string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) :  updateFollowing(username, true); \r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width:'100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not Following'}/>\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width:'100%'}}>\r\n                <Button \r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.userName)}/>\r\n            </Reveal.Content>                    \r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nexport default observer( function ProfileCard({profile}:Props){\r\n    \r\n    function truncate( str: string | undefined) {\r\n        if(str) {\r\n            return str.length > 40 ? str.substring(0,37) + '...' : str;\r\n        }    \r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.userName}`}>\r\n            <Image src={profile.image || '/assets/user.png'}/>\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>                \r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user'/>\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>                                    \r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer( function ActivityLitemItemAttendee({attendees}:Props){\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 2\r\n    }\r\n\r\n    return (\r\n            <List horizontal>                \r\n                {attendees.map( attendee => (\r\n                    <Popup\r\n                        hoverable\r\n                        key={attendee.userName}\r\n                        trigger={\r\n                            <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                                <Image \r\n                                    size='mini' \r\n                                    circular \r\n                                    bordered\r\n                                    src={attendee.image || '/assets/user.png'}\r\n                                    style={attendee.following ?styles : null}/>\r\n                            </List.Item>\r\n                        }\r\n                    >\r\n                        <Popup.Content>\r\n                            <ProfileCard profile={attendee}/>\r\n                        </Popup.Content>\r\n                    </Popup>\r\n                ))}\r\n            </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityLitemItemAttendee from \"./ActivityLitemItemAttendee\";\r\n\r\ninterface Props{\r\n    activity : Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props){\r\n\r\n    return( \r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                )}\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' style={{marginBottom:3}} circular src={activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></Item.Description>                            \r\n                            {activity.isHost && (\r\n                                <Item.Description>                                        \r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>                                        \r\n                            )}\r\n                            {activity.isGoing  && !activity.isHost &&  (\r\n                                <Item.Description>                                        \r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>                                        \r\n                            )}                            \r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker'/> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityLitemItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>    \r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer (function ActivityList() {\r\n\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <Fragment>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>{group}</Header>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem key={activity.id} activity={activity} />\r\n                        ))}\r\n                </Fragment>            \r\n            ))}\r\n        </Fragment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer( function ActivityFilters() {\r\n\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    \r\n    return(\r\n        <Fragment>\r\n        <Menu vertical size='large' style={{width: '100%', marginTop: 25}}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n                content='All Activites'\r\n                active={predicate.has('all')}\r\n                onClick={()=> setPredicate('all', 'true')}\r\n                />\r\n            <Menu.Item\r\n                content=\"I'm going\"\r\n                active={predicate.has('isGoing')}\r\n                onClick={()=> setPredicate('isGoing', 'true')}\r\n                />\r\n            <Menu.Item\r\n                 content=\"I'm hosting\"\r\n                 active={predicate.has('isHost')}\r\n                onClick={()=> setPredicate('isHost', 'true')}\r\n                />            \r\n        </Menu>\r\n        <Header />\r\n        <Calendar\r\n            onChange={(date: Date)=> setPredicate('startDate', date as Date)}\r\n            value={predicate.get('startDate') || new Date()}    \r\n        />\r\n        </Fragment>\r\n    )\r\n\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityList from \"./ActivityList\";\r\n\r\nimport {observer} from 'mobx-react-lite';\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer ( function ActivityDashboard(){\r\n\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext(){\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage +1));\r\n        loadActivities().then(()=> setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if( activityRegistry.size <= 1 ) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n  \r\n                                               \r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder/>\r\n                        <ActivityListItemPlaceholder/>\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList/>\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>                \r\n                <ActivityFilters/>\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>                \r\n                <Loader active={loadingNext}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props{\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content = 'Loading...'}:Props) {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport { useField } from \"formik\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string \r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField( props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            { meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport { useField } from \"formik\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;    \r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField( props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            { meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\nimport { useField } from \"formik\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;    \r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField( props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d)=> helpers.setValue(d.value)}\r\n                onBlur={()=>helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n                />\r\n            { meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}\r\n","export const categoryOptions = [\r\n    {text:'Drinks', value:'drinks'},\r\n    {text:'Culture', value:'culture'},\r\n    {text:'Film', value:'film'},\r\n    {text:'Food', value:'food'},\r\n    {text:'Music', value:'music'},\r\n    {text:'Travel', value:'travel'},\r\n]","import React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport { useField } from \"formik\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField( props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>            \r\n            <DatePicker\r\n                 {...field}\r\n                 {...props}\r\n                 selected={(field.value && new Date(field.value))||null}\r\n                 onChange={value=>helpers.setValue(value)}\r\n            />\r\n            { meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { Button, Segment,  Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from 'uuid';\r\nimport {observer} from 'mobx-react-lite';\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form} from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\nexport default observer ( function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n\r\n    const {activityStore} = useStore();\r\n    const {loadingInitial, createActivity, updateActivity, loadActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('The activity date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() =>{\r\n        if (id) loadActivity(id).then(activity=> setActivity(new ActivityFormValues(activity)));        \r\n    }, [id, loadActivity])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        \r\n        if(!activity.id){\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            }\r\n            createActivity(newActivity).then(()=>history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n             updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if(loadingInitial) return <LoadingComponent content='Loading Activity...'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n\r\n            <Formik \r\n            validationSchema={validationSchema}\r\n            enableReinitialize \r\n            initialValues={activity} \r\n            onSubmit={values=> handleFormSubmit(values)}>\r\n\r\n                {({handleSubmit, isValid, isSubmitting, dirty})=>(\r\n                    <Form onSubmit={handleSubmit} autoComplete='off' className='ui form'>\r\n                        <MyTextInput name='title' placeholder='Title'/>                        \r\n                        <MyTextArea rows={3} placeholder='Description' name='description'/>\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n\r\n                        <MyDateInput \r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='Time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' />\r\n\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City' name='city'/>\r\n                        <MyTextInput placeholder='Venue' name='venue'/>\r\n\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} \r\n                            floated='right'\r\n                            positive type='submit'\r\n                            content='Submit'/>\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'/>\r\n                    </Form>\r\n                )}       \r\n                </Formik>\r\n\r\n\r\n\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer( function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{email:'', password:'', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error=>\r\n                                setErrors({error:'Invalid email or password'}))}>\r\n\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => <Label style={{marginBottom:10}} basic color='red' content={errors.error}/> }\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors : any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props){\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map( (err: any, i: any) => (\r\n                        <Message.Item key={i}>\r\n                            {err}\r\n                        </Message.Item>                        \r\n                        )\r\n                    )}\r\n                </Message.List>                \r\n            )}\r\n        </Message>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer( function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', userName: '', email:'', password:'', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error=>\r\n                                setErrors({error}))}\r\n            validationSchema = {Yup.object({\r\n                displayName : Yup.string().required(),\r\n                userName : Yup.string().required(),\r\n                email : Yup.string().required().email(),\r\n                password : Yup.string().required(),\r\n             })}                               \r\n            >\r\n\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Register to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />                                        \r\n                    <MyTextInput name='password' placeholder='password' type='password'/>\r\n                    <ErrorMessage \r\n                        name='error'\r\n                        render={() => \r\n                            <ValidationErrors errors={errors.error}/> }\r\n                    />\r\n                    <Button \r\n                        disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} \r\n                        positive \r\n                        content='Register' \r\n                        type='submit' \r\n                        fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Divider, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default  observer( function HomePage() {\r\n\r\n    const {userStore, modalStore} = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom:12}}/>\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={()=>modalStore.openModal(<LoginForm/>)} size='huge' inverted>\r\n                        Login!\r\n                    </Button>\r\n                    <Button onClick={()=>modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                        Register!\r\n                    </Button>  \r\n                    <Divider horizontal inverted>Or</Divider>\r\n                    <Button \r\n                        size='huge'\r\n                        inverted\r\n                        color='facebook'\r\n                        content='Login with Facebook'\r\n                        onClick={userStore.facebookLogin} />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId : string\r\n}\r\n\r\nexport default observer(function ActivityDetailChat({activityId}:Props) {\r\n\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect( () => {\r\n        if(activityId){\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }        \r\n    }, [activityId, commentStore])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values,{resetForm}) => commentStore.addComment(values).then(()=>resetForm())}\r\n                    initialValues={{body:''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()  \r\n                    })}\r\n                    >\r\n                    {({isSubmitting, isValid, handleSubmit}) =>(\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                    {(props: FieldProps)=>(\r\n                                        <div style={{position: 'relative'}}>\r\n                                            <Loader active={isSubmitting}/>\r\n                                            <textarea placeholder='Enter you comment (Enter to submit,  SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e=>{\r\n                                                if(e.key === 'Enter' && e.shiftKey){\r\n                                                    return;\r\n                                                }\r\n                                                if(e.key === 'Enter' && !e.shiftKey){\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                            />\r\n                                        </div>    \r\n                                    )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>                \r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.username}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace:'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}                   \r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailHeader({activity}: Props) {\r\n    const {activityStore: { updateAttendence, loading, cancelAticityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{position: 'absolute', zIndex:1000, left: -14, top:20}} color='red' content='Cancelled'/>\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (                    \r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'} \r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelAticityToggle}\r\n                            loading={loading}\r\n                        />                        \r\n\r\n                        <Button \r\n                            as={Link} \r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'\r\n                            disabled={activity.isCancelled}>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendence}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button \r\n                        loading={loading} \r\n                        onClick={updateAttendence} \r\n                        color='teal' \r\n                        disabled={activity.isCancelled}>\r\n                            Join Activity\r\n                    </Button>\r\n                ) }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity : Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailSidebar ({activity : {attendees, host} }:Props) {\r\n    if(!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} { attendees.length===1? 'Person' : 'People'} going                \r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map( attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === host?.userName && (\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    {attendee.displayName}\r\n                                </Label>\r\n                            )}\r\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra> }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailChat from \"./ActivityDetailChat\";\r\nimport ActivityDetailHeader from \"./ActivityDetailHeader\";\r\nimport ActivityDetailInfo from \"./ActivityDetailInfo\";\r\nimport ActivityDetailSidebar from \"./ActivityDetailSidebar\";\r\n\r\nexport default observer ( function ActivityDetails (){\r\n\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity : activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n\r\n    const {id} = useParams<{id: string}>()\r\n\r\n    useEffect( () => {\r\n      if(id){\r\n        loadActivity(id);\r\n      } \r\n      return() => clearSelectedActivity();\r\n    }, [id, loadActivity,clearSelectedActivity])\r\n\r\n    if(loadingInitial || !activity) return <LoadingComponent/>;\r\n\r\n    return (\r\n      <Grid>\r\n          <Grid.Column width='10'>\r\n            <ActivityDetailHeader activity={activity}/>\r\n            <ActivityDetailInfo  activity={activity}/>\r\n            <ActivityDetailChat activityId={activity.id}/>\r\n          </Grid.Column>\r\n          <Grid.Column width='6'>\r\n            <ActivityDetailSidebar activity={activity}/>\r\n          </Grid.Column>\r\n      </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors}/> }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search'/>\r\n                Opps - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>    \r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(  function ServerError() { \r\n    const {commonStore} = useStore();\r\n\r\n    return ( \r\n        <Container>\r\n            <Header as='h1' content='Server Error'/>\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message}/>\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack Trace' color='teal'/>\r\n                    <code style={{marginTop:'10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer( function ModalContainer( ){\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n\r\n        </Modal>            \r\n    )\r\n})","import { Formik, Form } from \"formik\";\r\nimport React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport * as Yup from 'yup';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean)=> void;\r\n}\r\n\r\nexport default function ProfileEditForm({setEditMode}:Props) {\r\n\r\n    const {profileStore: {profile,updateProfile}} = useStore();\r\n\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: profile?.displayName, bio:profile?.bio}} \r\n            onSubmit={values => {\r\n                updateProfile(values).then(()=>{\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={ Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n            >\r\n            {({isValid, isSubmitting, dirty})=>(\r\n            <Form autoComplete='off' className='ui form'>\r\n                <MyTextInput name='displayName' placeholder='Display Name'/>                        \r\n                <MyTextArea rows={3}  placeholder='Bio' name='bio'/>\r\n\r\n                <Button\r\n                    positive \r\n                    type='submit'\r\n                    loading={isSubmitting}\r\n                    content='Update profile'\r\n                    floated='right'\r\n                    disabled={!dirty || !isValid}\r\n                    />\r\n            </Form>\r\n        )}       \r\n        </Formik>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nexport default function ProfileAbout(){\r\n\r\n    const {profileStore:{isCurrentUser, profile}} = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return(\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`}/>\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={()=> setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? \r\n                        <ProfileEditForm setEditMode={setEditMode} /> \r\n                        :                       \r\n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}     \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}","import { format } from \"date-fns\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Header, Image, Tab, TabProps } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    {menuItem: 'Future Events', pane: {key: 'future'} },\r\n    {menuItem: 'Past Events', pane: {key: 'past'}},\r\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\r\n];\r\n\r\nexport default observer( function ProfileActivities(){\r\n\r\n    const {profileStore} = useStore();\r\n\r\n    const {\r\n            loadingActivities,\r\n            loadUserActivities,\r\n            profile,\r\n            userActivities\r\n            } = profileStore;\r\n\r\n    useEffect( () => {\r\n        loadUserActivities(profile!.userName);\r\n    },[loadUserActivities, profile])            \r\n\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.userName, panes[data.activeIndex as number].pane.key)\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        panes={panes}\r\n                        menu={{secondary:true, pointing:true}}\r\n                        onTabChange={(e,data)=>handleTabChange(e,data)} />\r\n                        <br/>\r\n                        <Card.Group itemsPerRow={4}>\r\n                            {userActivities.map((activity:UserActivity) => (\r\n                                <Card\r\n                                    as={Link}\r\n                                    to={`/activities/${activity.id}`}\r\n                                    key={activity.id} \r\n                                >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.catergory}.jpg`}\r\n                                    style={{minHeight:100, objectFit: 'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer( function ProfileFollowing(){\r\n\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return(\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user'\r\n                    \r\n                    content={activeTab === 3 ? `Profile following ${profile?.displayName}` : `Profile ${profile?.displayName} is following`}/>\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map( profile => (\r\n                            <ProfileCard key={profile.userName} profile={profile}/>                                \r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n\r\n    )\r\n\r\n})","import React, {useCallback} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropZone({setFiles}: Props) {\r\n\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        boderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles( acceptedFiles.map( (file:any)=>Object.assign(file,{\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n        console.log( acceptedFiles);\r\n    }, [setFiles])\r\n    \r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (      \r\n    <div {...getRootProps()} style={isDragActive?{...dzStyles, ...dzActive}: dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge'/>\r\n      <Header content='Drop image here'/>      \r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport 'cropperjs/dist/cropper.css';\r\nimport Cropper from \"react-cropper\";\r\n\r\ninterface Props{\r\n    imagePreview: string,\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport function PhotoWidgetCropper({imagePreview, setCropper}: Props){\r\n\r\n    return (\r\n            <Cropper\r\n              src={imagePreview}\r\n              style={{ height: 200, width: \"100%\" }}\r\n              // Cropper.js options\r\n              initialAspectRatio={1}\r\n              aspectRatio={1}\r\n              preview='.img-preview'              \r\n              guides={false}\r\n              viewMode={1}\r\n              autoCropArea={1}\r\n              background={false}              \r\n              onInitialized= {cropper => setCropper(cropper)}\r\n            />\r\n                  \r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropZone from \"./PhotoWidgetDropZone\";\r\nimport Cropper from \"react-cropper\";\r\nimport { PhotoWidgetCropper } from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props{\r\n    uploading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploading, uploadPhoto}:Props){\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if(cropper){\r\n            cropper.getCroppedCanvas().toBlob( blob => uploadPhoto(blob!))\r\n        }\r\n    }\r\n\r\n    useEffect( ()=> {\r\n        return ()=>{\r\n            files.forEach((file:any)=> URL.revokeObjectURL(file.preview) )\r\n        }\r\n    },[files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\r\n                <PhotoWidgetDropZone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image'/>                \r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\r\n                {files && files.length > 0 && (\r\n                    <>\r\n                        <div className = 'img-preview' style={{minHeight:200, overflow:'hidden'}} />   \r\n                        <Button.Group width={2}>\r\n                            <Button onClick={onCrop} positive icon='check' loading={uploading}/>\r\n                            <Button onClick={()=>setFiles([])}  icon='close' disabled={uploading}/>\r\n                        </Button.Group>\r\n                    </>\r\n                )}\r\n                    \r\n            </Grid.Column>            \r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}:Props){\r\n\r\n    const {profileStore: {\r\n                    isCurrentUser, \r\n                    uploadPhoto,\r\n                    uploading, \r\n                    loading, \r\n                    setMainPhoto,\r\n                    deletePhoto}} = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then( () => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto( photo: Photo, e : SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto( photo: Photo, e : SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }    \r\n    \r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content='Photos' floated='left'/>\r\n                    {isCurrentUser && (\r\n                        <Button \r\n                            floated='right' \r\n                            basic \r\n                            content={addPhotoMode? 'Cancel' : 'Add Photo' } \r\n                            onClick={()=> setAddPhotoMode(!addPhotoMode)}\r\n                            />\r\n                    ) }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} uploading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map( photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid width={2}>\r\n                                            <Button \r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main'+photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading = {target=== 'main' + photo.id && loading}\r\n                                                onClick={e =>handleSetMainPhoto(photo,e)}\r\n                                            />\r\n                                            <Button \r\n                                                basic \r\n                                                color='red' \r\n                                                icon='trash'\r\n                                                loading = {target===photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    ) }\r\n                                </Card>\r\n                                )\r\n                            )}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>    \r\n\r\n            \r\n\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n            {menuItem: 'About', render: () => <ProfileAbout/>},\r\n            {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n            {menuItem: 'Events', render: () => <ProfileActivities/>},\r\n            {menuItem: 'Followers', render: () => <ProfileFollowings/>},\r\n            {menuItem: 'Following', render: () => <ProfileFollowings/>}\r\n    ]\r\n\r\n    return( \r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data)=> profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(  function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                        <Statistic.Group width={2}>\r\n                            <Statistic label='Followers' value={profile.followersCount}/>\r\n                            <Statistic label='Following' value={profile.followingCount}/>\r\n                        </Statistic.Group>\r\n                        <Divider/>\r\n                        <FollowButton profile={profile}/>                        \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username:string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(()=>{\r\n        loadProfile(username);\r\n        return ()=>{\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile,username,setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...'/>\r\n\r\n    return (        \r\n        <Grid.Column width={16}>\r\n            {profile && \r\n                <>\r\n                    <ProfileHeader profile={profile}/>\r\n                    <ProfileContent profile={profile}/>\r\n                </>}                    \r\n        </Grid.Column>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component : React.ComponentType<RouteComponentProps<any>> |  React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component : Component, ...rest}: Props) {\r\n    const {userStore:{isLoggedIn}} = useStore();\r\n\r\n    return(\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\r\n        />\r\n    )\r\n}","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n\n  const { commonStore, userStore } = useStore();\n\n  useEffect( () => {\n    if(commonStore.token){\n      userStore.getUser().finally(()=>commonStore.setAppLoaded());      \n    } else { \n      userStore.getFacebookLoginStatus().then(()=>commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  return (\n    <Fragment>\n        <ToastContainer position='bottom-right' hideProgressBar/>\n        <ModalContainer/>\n        <Route exact path='/' component={HomePage}/>\n        <Route \n          path={'/(.+)'}\n          render={()=>(\n            <Fragment>\n              <NavBar/>\n              <Container style = {{marginTop: '7em'}}>\n                <Switch>          \n                  <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm}/>\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage}/>                  \n                  <PrivateRoute path='/errors' component={TestErrors}/>\n                  <Route path='/server-error' component={ServerError}/>\n                  <PrivateRoute component={NotFound}/>\n                </Switch>          \n              </Container>            \n            </Fragment>\n          )}\n        />\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n  \r\n    useEffect(() => {\r\n      window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n  \r\n    return null;\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './app/layout/styles.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport {store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <ScrollToTop/>\n        <App />\n      </Router>\n    </StoreContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}